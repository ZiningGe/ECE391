#ifndef _KEYBOARD_H
#define _KEYBOARD_H

// some includes here
#include "types.h"
#include "lib.h"
#include "i8259.h"

// keyboard irq for enable/disable interrupt
// keyboard port addr for collecting scancode

// !!!!! leave uncertain here, 10/15 2:01 PM
#define KEYBOARD_IRQ 0x01
#define KEYBOARD_PORT_ADDR 0x60
#define MAX_SIZE_KEYBOARD_BUFFER    128

// current running keyboard, equals the display ID (what we are viewing)
uint8_t curr_kid;
// flag for if the keyboard is implementing writing to terminal
// when writing is implemented directly 
uint8_t curr_writing;

// structure for keyboard buffer, contains lastIdx, a 128 char buffer, and a readFinish flag
typedef struct keyboardBufferStruct{
    char charBuffer[MAX_SIZE_KEYBOARD_BUFFER];
    uint32_t lastIdx;
    uint8_t readFinish;
}keyboardBufferStruct;

// For storing function key flags
typedef struct keyboardFlagsStruct{
    uint8_t alt;
    uint8_t shift;
    uint8_t ctrl;
    uint8_t caps;
}keyboardFlagsStruct;



/*
function: init_keyboard:
    DESCRIPTION:
        - call enable_irq() to keyboard port, enable interrupt of keyboard
          and initialize flags
    INPUT: 
        - NONE
    RETURN:
        - NONE
    EFFECTS:
        - Initialize keyboard interrupt and flags of function keys
*/
extern void init_keyboard();

/*
function: init_keyboard_buffer:
    DESCRIPTION:
        - initialize the keyboard buffer, called when terminal_read is executing
    INPUT: 
        - NONE
    RETURN:
        - NONE
    EFFECTS:
        - Initialize all variables in keyboard buffer struct
*/
extern void init_keyboard_buffer();

/*
function: get_keyboard_buffer:
    DESCRIPTION:
        - get the pointer of keyboard buffer, used for getting buffer values and readFinish flag
    INPUT: 
        - NONE
    RETURN:
        - NONE
    EFFECTS:
        - Help terminal_read to read correct keyboard value
*/
extern struct keyboardBufferStruct* get_keyboard_buffer();

/*
function: get_keyboard_buffer_kid:
    DESCRIPTION:
        - get the pointer of keyboard buffer based on kid
    INPUT: 
        - NONE
    RETURN:
        - NONE
    EFFECTS:
        - Help terminal_read to read correct keyboard value
*/
struct keyboardBufferStruct* get_keyboard_buffer_kid();


/*
function: scancode_to_ascii:
    DESCRIPTION:
        - Outputs an 2 bytes ASCII from input scancode value and global flags 
    INPUT: 
        - uint8_t scancode: the received 2 byte code from keyboard port 0x60
    RETURN:
        - the corresponding ascii code to the scancode and current flags
    EFFECTS:
        - None
*/
extern char scancode_to_ascii(uint8_t scancode);




/*
function: flags_handler:
    DESCRIPTION:
        - A check process within keyboard handler, set up corresponding function key's flag
    INPUT: 
        - scancode:
            to decide which function going to be runned accordingly
    RETURN:
        - 1 for any flag changes, handler quit
        - 0 for nothing happened, keep on checking
    EFFECTS:
        - change the ascii that print to terminal
*/
extern uint8_t flags_handler(uint8_t scancode);



/*
function: shortcut_handler:
    DESCRIPTION:
        - A handler to do certain functions when short cut is received
    INPUT: 
        - scancode:
            to decide which function going to be runned accordingly
    RETURN:
        - 1 for any flag changes, handler quit
        - 0 for nothing happened, keep on checking
    EFFECTS:
        - allow various short-cut to execute accordingly
*/
extern uint8_t shortcut_handler(uint8_t scancode);

/*
function: functional_key_handler:
    DESCRIPTION:
        - A handler to do certain functions when single functional key (tab, enter) is received
    INPUT: 
        - scancode:
            to decide which function going to be runned accordingly
    RETURN:
        - 1 for any flag changes, handler quit
        - 0 for nothing happened, keep on checking
    EFFECTS:
        - various performance which differs from regular key will be executed 
*/
extern uint8_t functional_key_handler(uint8_t scancode);


/*
function: keyboard_handler:
    DESCRIPTION:
        - Handle the keyboard interrupt generated by pressing a key. Call helper functions
          to generate a ascii from keyboard input and print to terminal
    INPUT: 
        - NONE
    RETURN:
        - NONE
    EFFECTS:
        - print corresponding character to terminal
*/
extern void keyboard_handler();


/*
function: functional_key_handler:
    DESCRIPTION:
        - A handler to do certain functions when single functional key (tab, enter) is received
    INPUT: 
        - scancode:
            to decide which function going to be runned accordingly
    RETURN:
        - 1 for any flag changes, handler quit
        - 0 for nothing happened, keep on checking
    EFFECTS:
        - various performance which differs from regular key will be executed 
*/
extern void switch_handler(uint8_t target_kid);


#endif
